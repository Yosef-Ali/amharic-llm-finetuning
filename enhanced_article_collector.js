#!/usr/bin/env node

const https = require('https');
const http = require('http');
const fs = require('fs').promises;
const path = require('path');
const { URL } = require('url');

class EnhancedAmharicCollector {
  constructor() {
    this.articles = [];
    this.outputDir = './collected_articles';
    this.maxArticles = 1000;
    this.currentCount = 0;
    this.processedUrls = new Set(); // Avoid duplicates
    
    // Expanded Wikipedia categories for Amharic content
    this.wikiCategories = [
      'Category:·ä¢·âµ·ãÆ·åµ·ã´',
      'Category:·ã®·ä¢·âµ·ãÆ·åµ·ã´_·â≥·à™·ä≠', 
      'Category:·ã®·ä¢·âµ·ãÆ·åµ·ã´_·à∞·ãé·âΩ',
      'Category:·ã®·ä¢·âµ·ãÆ·åµ·ã´_·åÇ·ä¶·åç·à´·çä',
      'Category:·ã®·ä¢·âµ·ãÆ·åµ·ã´_·â£·àÖ·àç',
      'Category:·ã®·ä¢·âµ·ãÆ·åµ·ã´_·âã·äï·âã·ãé·âΩ',
      'Category:·ä†·àõ·à≠·äõ',
      'Category:·ä¶·àÆ·àù·äõ',
      'Category:·ä†·çç·à™·ä´',
      'Category:·ã®·ä†·çç·à™·ä´_·àÄ·åà·àÆ·âΩ',
      'Category:·ä≠·à≠·àµ·âµ·äì',
      'Category:·ä•·àµ·àç·àù·äì',
      'Category:·à≥·ã≠·äï·àµ',
      'Category:·àµ·äê_·åΩ·àÅ·çç',
      'Category:·àô·ãö·âÉ',
      'Category:·àµ·çñ·à≠·âµ',
      'Category:·ä¢·äÆ·äñ·àö'
    ];

    // Expanded list of known Amharic Wikipedia articles
    this.wikiArticles = [
      // Geography & Places
      '·ä¢·âµ·ãÆ·åµ·ã´', '·ä†·ã≤·àµ_·ä†·â†·â£', '·àÄ·ã≠·àà_·à•·àã·à¥', '·àò·äï·àä·ä≠_·ã≥·åç·àõ·ãä', '·àã·àä·â†·àã', '·åé·äï·ã∞·à≠', '·ä†·ä≠·à±·àù',
      '·àÉ·à®·à≠', '·â£·àÖ·à≠_·ã≥·à≠', '·àò·âÄ·àå', '·åÖ·àõ', '·àÄ·ãã·à≥', '·ä†·à≠·â£_·àù·äï·å≠', '·äì·ãù·à¨·âµ', '·ã∞·à¥', '·ãµ·à¨_·ã≥·ãã',
      '·ä†·ãã·àΩ_·ãà·äï·ãù', '·ä†·â£·ã≠_·ãà·äï·ãù', '·ä¶·àû_·ãà·äï·ãù', '·à∞·â•·àà_·ãç·äï·åâ·àç·äì_·àÄ·ãä', '·ã≥·äì·ä™·àç_·àù·ãµ·à®_·â†·ã≥',
      '·à∞·àú·äï_·â∞·à´·à´', '·â£·àå_·â∞·à´·àÆ·âΩ', '·à≤·àú·äï_·â∞·à´·à´', '·ä†·çã·à≠_·à≥·àÖ·àç', '·ä¶·åã·ã¥·äï',
      
      // Languages & Peoples
      '·ä†·àõ·à≠·äõ', '·ä¶·àÆ·àû', '·âµ·åç·à®', '·ãà·àã·ã≠·â≥', '·à≤·ã≥·àõ', '·åâ·à´·åå', '·à∂·àõ·àå', '·ä†·çã·à≠', '·åã·àû',
      '·à∏·äÆ', '·ä´·çã', '·ä≠·àù·â£·â≥', '·àÄ·ã≤·ã´', '·ä†·àã·â£', '·â§·åÉ', '·à∞·àÉ·äï·åâ·àç', '·åã·àù·â§·àã',
      
      // History & Culture
      '·ã®·ä¢·âµ·ãÆ·åµ·ã´_·â≥·à™·ä≠', '·ä†·ä≠·à±·àù_·àò·äï·åç·à•·âµ', '·ãò·åç·ãå_·à•·à≠·ãà_·àò·äï·åç·à•·âµ', '·ã®·à∏·ãã_·àò·äï·åç·à•·âµ',
      '·ã®·åé·äï·ã∞·à≠_·ãò·àò·äï', '·àò·à£·çç·äï·âµ_·ãò·àò·äï', '·ã®·ãò·àò·äï_·ä†·ã¥·àµ', '·ã®·ã∞·à≠·åç_·àò·äï·åç·à•·âµ',
      '·ä¢·âµ·ãÆ·åµ·ã´·ãä_·ãì·çç·à™·ä´·ãä_·àò·äï·åç·à•·âµ', '·ã®·àÉ·åà·à≠_·ãç·ã≥·ãµ_·å¶·à≠·äê·âµ', '·ã®·å£·àä·ã´·äï_·ãà·à®·à´',
      
      // Religion
      '·ã®·ä¢·âµ·ãÆ·åµ·ã´_·ä¶·à≠·â∂·ã∂·ä≠·àµ_·â∞·ãã·àï·ã∂_·â§·â∞_·ä≠·à≠·àµ·â≤·ã´·äï', '·ä•·àµ·àç·àù·äì_·â†·ä¢·âµ·ãÆ·åµ·ã´', '·çï·àÆ·â¥·àµ·â≥·äï·âµ_·â†·ä¢·âµ·ãÆ·åµ·ã´',
      '·âÖ·ã±·àµ_·åä·ãÆ·à≠·åä·àµ', '·âÖ·ã±·àµ_·àö·ä´·ä§·àç', '·âÖ·ã±·àµ_·åà·â•·à≠·ä§·àç', '·âÖ·ãµ·àµ·âµ_·àõ·à≠·ã´·àù',
      '·å•·àù·âÄ·âµ', '·àò·àµ·âÄ·àç', '·åà·äì', '·çã·à≤·ä´', '·ä•·àµ·àã·àö_·â†·ãì·àã·âµ',
      
      // Science & Education
      '·à≥·ã≠·äï·àµ', '·â¥·ä≠·äñ·àé·åÇ', '·àê·ä™·àù·äì', '·àï·ä≠·àù·äì', '·ã©·äí·â®·à≠·à≤·â≤', '·âµ·àù·àÖ·à≠·âµ',
      '·ä†·ã≤·àµ_·ä†·â†·â£_·ã©·äí·â®·à≠·à≤·â≤', '·ã®·àÉ·à´·àõ·ã´_·ã©·äí·â®·à≠·à≤·â≤', '·ã®·â£·àÖ·à≠_·ã≥·à≠_·ã©·äí·â®·à≠·à≤·â≤',
      '·ã®·àò·âÄ·àå_·ã©·äí·â®·à≠·à≤·â≤', '·äÆ·àù·çí·ã©·â∞·à≠', '·ä¢·äï·â∞·à≠·äî·âµ', '·àû·â£·ã≠·àç_·àµ·àç·ä≠',
      
      // Arts & Literature
      '·à•·äê_·åΩ·àÅ·çç', '·â£·àÖ·àã·ãä_·àô·ãö·âÉ', '·à•·ãï·àç', '·âÖ·à≠·åΩ', '·à•·äê_·å•·â†·â•', '·à¥·à´·àö·ä≠',
      '·â£·àÖ·àã·ãä_·äï·åΩ·àï·äì·âµ', '·â£·àÖ·àã·ãä_·àç·â•·àµ', '·â£·àÖ·àã·ãä_·ã≥·äï·àµ', '·â£·àÖ·àã·ãä_·àò·à≥·à™·ã´·ãé·âΩ',
      
      // Food & Agriculture
      '·ä•·äï·åÄ·à´', '·ã∂·àÆ_·ãà·å•', '·âÉ·ã≠_·ãà·å•', '·à∫·àÆ', '·âÉ·ãù·äì', '·â£·ã≠·äê·â∞', '·â°·à≠·â±·âÉ·äï',
      '·â°·äì', '·àª·ã≠', '·ãà·à≠·âÖ_·ãà·à≠·âÇ', '·å§·çç', '·àΩ·äï·â•·à´', '·ä•·àÖ·àç', '·ãï·à≠·àª',
      '·ä•·äï·àµ·à≥·âµ_·ä•·à≠·â£·â≥', '·ä®·â•·âµ', '·çç·ã®·àç', '·â†·åç', '·ã∂·àÆ', '·äï·â•_·ä•·à≠·â£·â≥',
      
      // Sports & Recreation
      '·ä•·åç·à≠_·ä≥·àµ', '·âÖ·à≠·å´_·ä≥·àµ', '·â¥·äí·àµ', '·ä†·âµ·àå·â≤·ä≠·àµ', '·àò·àÆ·å•', '·â¶·ä≠·àµ',
      '·ä¶·àä·àù·çí·ä≠', '·ã®·ãì·àà·àù_·àª·àù·çí·ãÆ·äï·äê·âµ', '·àõ·à´·â∂·äï', '·ã®·àµ·çñ·à≠·âµ_·ä≠·àà·â¶·âΩ',
      
      // Modern Ethiopia
      '·ã®·ä¢·âµ·ãÆ·åµ·ã´_·çå·ã¥·à´·àã·ãä_·ã≤·àû·ä≠·à´·à≤·ã´·ãä_·à™·çê·â•·àä·ä≠', '·ã®·ä¢·âµ·ãÆ·åµ·ã´_·àï·åà_·àò·äï·åç·à•·âµ',
      '·ã®·ä¢·âµ·ãÆ·åµ·ã´_·â•·à≠', '·ä¢·âµ·ãÆ·åµ·ã´_·ä†·ã®·à≠_·àò·äï·åà·ãµ', '·ã®·ä¢·âµ·ãÆ·åµ·ã´_·â£·äï·ä≠',
      '·ã®·ä¢·âµ·ãÆ·åµ·ã´_·çñ·àµ·â≥', '·ä¢·âµ·ãÆ_·â¥·àå·äÆ·àù', '·ã®·ä¢·âµ·ãÆ·åµ·ã´_·à¨·ãµ·ãÆ',
      
      // International Relations  
      '·ã®·ä†·çç·à™·ä´_·àï·â•·à®·âµ', '·ã®·â∞·â£·â†·à©·âµ_·àò·äï·åç·à•·â≥·âµ', '·ä†·ãç·àÆ·çì·ãä_·àï·â•·à®·âµ',
      '·ã®·ä†·àú·à™·ä´_·àï·â•·à®·âµ_·àò·äï·åç·à•·â≥·âµ', '·âª·ã≠·äì', '·àÖ·äï·ãµ', '·ã´·çì·äï', '·ä•·àµ·à´·ä§·àç',
      
      // Calendar & Time
      '·ã®·ä¢·âµ·ãÆ·åµ·ã´_·ãò·àò·äï_·ä†·âÜ·å£·å†·à≠', '·ã®·ä¢·âµ·ãÆ·åµ·ã´_·ãà·à´·âµ', '·àò·àµ·ä®·à®·àù', '·å•·âÖ·àù·âµ',
      '·äÖ·ã≥·à≠', '·â≥·àÖ·à≥·àµ', '·å•·à≠', '·ã®·ä´·â≤·âµ', '·àò·åã·â¢·âµ', '·àö·ã´·ãù·ã´', '·åç·äï·â¶·âµ',
      '·à∞·äî', '·àê·àù·àå', '·äê·àê·à¥', '·å≥·åâ·àú'
    ];

    // RSS feeds and news sources
    this.newsFeeds = [
      {
        name: 'EBC News RSS',
        url: 'https://www.ebc.et/web/guest/rss',
        type: 'rss'
      },
      {
        name: 'Fana Broadcasting RSS', 
        url: 'https://www.fanabc.com/english/feed/',
        type: 'rss'
      }
    ];
  }

  async initialize() {
    console.log('üöÄ Initializing Enhanced Amharic Article Collector...');
    console.log(`üéØ Target: ${this.maxArticles} articles`);
    
    try {
      await fs.mkdir(this.outputDir, { recursive: true });
      console.log(`üìÅ Output directory ready: ${this.outputDir}`);
    } catch (error) {
      console.log(`üìÅ Output directory exists: ${this.outputDir}`);
    }

    // Load existing articles to avoid duplicates
    try {
      const files = await fs.readdir(this.outputDir);
      const existingCount = files.filter(f => f.startsWith('article_') && f.endsWith('.json')).length;
      if (existingCount > 0) {
        console.log(`üìö Found ${existingCount} existing articles`);
        this.currentCount = existingCount;
      }
    } catch (error) {
      console.log('üìö Starting fresh collection');
    }
  }

  async fetchUrl(url, timeout = 15000) {
    return new Promise((resolve, reject) => {
      const client = url.startsWith('https:') ? https : http;
      
      const req = client.get(url, {
        headers: {
          'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
          'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
          'Accept-Language': 'am,en;q=0.9',
          'Accept-Encoding': 'gzip, deflate'
        }
      }, (res) => {
        let data = '';
        
        res.on('data', (chunk) => {
          data += chunk;
        });
        
        res.on('end', () => {
          resolve(data);
        });
      });
      
      req.on('error', (error) => {
        reject(error);
      });
      
      req.setTimeout(timeout, () => {
        req.destroy();
        reject(new Error(`Request timeout after ${timeout}ms`));
      });
    });
  }

  async fetchWikipediaArticle(title, fullContent = true) {
    if (this.processedUrls.has(title)) {
      return null; // Skip duplicates
    }
    
    this.processedUrls.add(title);
    
    const baseUrl = fullContent 
      ? `https://am.wikipedia.org/w/api.php?action=query&format=json&titles=${encodeURIComponent(title)}&prop=extracts&exintro=false&explaintext=true`
      : `https://am.wikipedia.org/api/rest_v1/page/summary/${encodeURIComponent(title)}`;
    
    try {
      const response = await this.fetchUrl(baseUrl);
      const data = JSON.parse(response);
      
      let article = null;
      
      if (fullContent && data.query?.pages) {
        const pageId = Object.keys(data.query.pages)[0];
        const page = data.query.pages[pageId];
        
        if (page.extract && page.extract.length > 500) {
          article = {
            title: page.title || title,
            content: page.extract,
            url: `https://am.wikipedia.org/wiki/${encodeURIComponent(title)}`,
            source: 'Wikipedia Amharic',
            timestamp: new Date().toISOString(),
            wordCount: page.extract.split(/\s+/).length
          };
        }
      } else if (!fullContent && data.extract) {
        if (data.extract.length > 200) {
          article = {
            title: data.title || title,
            content: data.extract,
            url: `https://am.wikipedia.org/wiki/${encodeURIComponent(title)}`,
            source: 'Wikipedia Amharic',
            timestamp: new Date().toISOString()
          };
        }
      }
      
      return article;
    } catch (error) {
      console.log(`‚ùå Failed to fetch ${title}: ${error.message}`);
      return null;
    }
  }

  async fetchCategoryMembers(category, limit = 100) {
    const url = `https://am.wikipedia.org/w/api.php?action=query&format=json&list=categorymembers&cmtitle=${encodeURIComponent(category)}&cmlimit=${limit}&cmnamespace=0`;
    
    try {
      const response = await this.fetchUrl(url);
      const data = JSON.parse(response);
      
      const members = data.query?.categorymembers || [];
      console.log(`üîç Found ${members.length} articles in ${category}`);
      
      return members.map(member => member.title);
    } catch (error) {
      console.log(`‚ùå Failed to fetch category ${category}: ${error.message}`);
      return [];
    }
  }

  async fetchRandomArticles(count = 50) {
    const url = `https://am.wikipedia.org/w/api.php?action=query&format=json&list=random&rnnamespace=0&rnlimit=${count}`;
    
    try {
      const response = await this.fetchUrl(url);
      const data = JSON.parse(response);
      
      const articles = data.query?.random || [];
      console.log(`üé≤ Found ${articles.length} random articles`);
      
      return articles.map(article => article.title);
    } catch (error) {
      console.log(`‚ùå Failed to fetch random articles: ${error.message}`);
      return [];
    }
  }

  isAmharicContent(text) {
    if (!text) return false;
    
    const amharicRegex = /[\u1200-\u137F]/g;
    const amharicChars = (text.match(amharicRegex) || []).length;
    const totalChars = text.length;
    
    return amharicChars > 0 && (amharicChars / totalChars) > 0.2;
  }

  async saveArticle(article, index) {
    const filename = `article_${index.toString().padStart(4, '0')}.json`;
    const filepath = path.join(this.outputDir, filename);
    
    try {
      await fs.writeFile(filepath, JSON.stringify(article, null, 2), 'utf8');
      console.log(`‚úÖ [${index}/${this.maxArticles}] Saved: ${article.title.substring(0, 50)}...`);
      return true;
    } catch (error) {
      console.error(`‚ùå Error saving article ${index}:`, error.message);
      return false;
    }
  }

  async collectFromKnownArticles() {
    console.log('\nüìö Collecting from known Wikipedia articles...');
    
    for (const title of this.wikiArticles) {
      if (this.currentCount >= this.maxArticles) break;
      
      console.log(`\nüîç [${this.currentCount + 1}/${this.maxArticles}] Fetching: ${title}`);
      
      const article = await this.fetchWikipediaArticle(title, true);
      
      if (article && this.isAmharicContent(article.content)) {
        article.articleNumber = this.currentCount + 1;
        
        const saved = await this.saveArticle(article, this.currentCount + 1);
        if (saved) {
          this.articles.push(article);
          this.currentCount++;
        }
      } else {
        console.log(`‚ùå Skipped: Invalid or non-Amharic content`);
      }
      
      // Be respectful to Wikipedia
      await new Promise(resolve => setTimeout(resolve, 800));
    }
  }

  async collectFromCategories() {
    console.log('\nüóÇÔ∏è Collecting from Wikipedia categories...');
    
    for (const category of this.wikiCategories) {
      if (this.currentCount >= this.maxArticles) break;
      
      console.log(`\nüìÇ Processing category: ${category}`);
      
      const members = await this.fetchCategoryMembers(category, 200);
      
      for (const title of members) {
        if (this.currentCount >= this.maxArticles) break;
        
        if (!this.processedUrls.has(title)) {
          console.log(`\nüîç [${this.currentCount + 1}/${this.maxArticles}] Category article: ${title}`);
          
          const article = await this.fetchWikipediaArticle(title, true);
          
          if (article && this.isAmharicContent(article.content) && article.content.length > 300) {
            article.articleNumber = this.currentCount + 1;
            article.source = `Wikipedia Amharic (${category})`;
            
            const saved = await this.saveArticle(article, this.currentCount + 1);
            if (saved) {
              this.articles.push(article);
              this.currentCount++;
            }
          }
          
          await new Promise(resolve => setTimeout(resolve, 600));
        }
      }
      
      await new Promise(resolve => setTimeout(resolve, 1000));
    }
  }

  async collectRandomArticles() {
    console.log('\nüé≤ Collecting random Wikipedia articles...');
    
    let attempts = 0;
    const maxAttempts = 10;
    
    while (this.currentCount < this.maxArticles && attempts < maxAttempts) {
      attempts++;
      console.log(`\nüé≤ Random collection attempt ${attempts}/${maxAttempts}`);
      
      const randomTitles = await this.fetchRandomArticles(100);
      
      for (const title of randomTitles) {
        if (this.currentCount >= this.maxArticles) break;
        
        if (!this.processedUrls.has(title)) {
          console.log(`\nüîç [${this.currentCount + 1}/${this.maxArticles}] Random article: ${title}`);
          
          const article = await this.fetchWikipediaArticle(title, true);
          
          if (article && this.isAmharicContent(article.content) && article.content.length > 400) {
            article.articleNumber = this.currentCount + 1;
            article.source = 'Wikipedia Amharic (Random)';
            
            const saved = await this.saveArticle(article, this.currentCount + 1);
            if (saved) {
              this.articles.push(article);
              this.currentCount++;
            }
          }
          
          await new Promise(resolve => setTimeout(resolve, 500));
        }
      }
      
      await new Promise(resolve => setTimeout(resolve, 2000));
    }
  }

  async generateContentVariations() {
    console.log('\nüîÑ Generating content variations...');
    
    const baseArticles = [...this.articles];
    
    for (const baseArticle of baseArticles) {
      if (this.currentCount >= this.maxArticles) break;
      
      // Split long articles into focused sections
      if (baseArticle.content.length > 2000) {
        const paragraphs = baseArticle.content.split(/\n\n+/).filter(p => p.trim().length > 200);
        
        for (let i = 0; i < paragraphs.length && this.currentCount < this.maxArticles; i++) {
          const paragraph = paragraphs[i];
          
          if (paragraph.length > 300 && this.isAmharicContent(paragraph)) {
            const variation = {
              title: `${baseArticle.title} - ·ä≠·çç·àç ${i + 1}`,
              content: paragraph,
              url: `${baseArticle.url}#paragraph_${i + 1}`,
              source: `${baseArticle.source} (Paragraph)`,
              timestamp: new Date().toISOString(),
              originalArticle: baseArticle.title,
              articleNumber: this.currentCount + 1
            };
            
            const saved = await this.saveArticle(variation, this.currentCount + 1);
            if (saved) {
              this.articles.push(variation);
              this.currentCount++;
            }
          }
        }
      }
    }
  }

  async saveCollectionSummary() {
    const summary = {
      totalArticles: this.currentCount,
      targetArticles: this.maxArticles,
      completionRate: (this.currentCount / this.maxArticles * 100).toFixed(1) + '%',
      collectionDate: new Date().toISOString(),
      sources: [...new Set(this.articles.map(a => a.source))],
      averageLength: Math.round(this.articles.reduce((sum, a) => sum + a.content.length, 0) / this.articles.length),
      totalCharacters: this.articles.reduce((sum, a) => sum + a.content.length, 0),
      uniqueUrls: this.processedUrls.size,
      articles: this.articles.map(a => ({
        title: a.title,
        source: a.source,
        length: a.content.length,
        url: a.url
      }))
    };
    
    const summaryPath = path.join(this.outputDir, 'enhanced_collection_summary.json');
    await fs.writeFile(summaryPath, JSON.stringify(summary, null, 2), 'utf8');
    console.log(`\nüìã Enhanced collection summary saved to: ${summaryPath}`);
    
    return summary;
  }

  async run() {
    try {
      await this.initialize();
      
      console.log(`\nüéØ Starting enhanced collection (Current: ${this.currentCount}/${this.maxArticles})`);
      
      // Phase 1: Known high-quality articles
      if (this.currentCount < this.maxArticles) {
        await this.collectFromKnownArticles();
        console.log(`\nüìä Phase 1 complete: ${this.currentCount}/${this.maxArticles} articles`);
      }
      
      // Phase 2: Category-based discovery
      if (this.currentCount < this.maxArticles) {
        await this.collectFromCategories();
        console.log(`\nüìä Phase 2 complete: ${this.currentCount}/${this.maxArticles} articles`);
      }
      
      // Phase 3: Random article discovery
      if (this.currentCount < this.maxArticles) {
        await this.collectRandomArticles();
        console.log(`\nüìä Phase 3 complete: ${this.currentCount}/${this.maxArticles} articles`);
      }
      
      // Phase 4: Content variations
      if (this.currentCount < this.maxArticles) {
        await this.generateContentVariations();
        console.log(`\nüìä Phase 4 complete: ${this.currentCount}/${this.maxArticles} articles`);
      }
      
      const summary = await this.saveCollectionSummary();
      
      console.log(`\nüéâ Enhanced Collection Complete!`);
      console.log(`üìä Final Statistics:`);
      console.log(`   Articles collected: ${summary.totalArticles}/${summary.targetArticles} (${summary.completionRate})`);
      console.log(`   Total characters: ${summary.totalCharacters.toLocaleString()}`);
      console.log(`   Average length: ${summary.averageLength} characters`);
      console.log(`   Unique URLs processed: ${summary.uniqueUrls}`);
      console.log(`   Sources: ${summary.sources.length} different sources`);
      console.log(`   Files saved in: ${this.outputDir}`);
      
    } catch (error) {
      console.error('‚ùå Enhanced collection failed:', error);
    }
  }
}

// Run if called directly
if (require.main === module) {
  const collector = new EnhancedAmharicCollector();
  collector.run().catch(console.error);
}

module.exports = EnhancedAmharicCollector;