from flask import Flask, render_template, request, jsonify
import torch
import sys
import os
import traceback

# Add src to path
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))
from models.cpu_hnet import CPUAmharicHNet

app = Flask(__name__)

# Global model variable
model = None
model_loaded = False

def load_model():
    """Load the trained model"""
    global model, model_loaded
    
    model_path = 'tiny_amharic_hnet.pt'
    
    try:
        if os.path.exists(model_path):
            checkpoint = torch.load(model_path, map_location='cpu')
            model = CPUAmharicHNet()
            model.load_state_dict(checkpoint['model_state_dict'])
            model.eval()
            model_loaded = True
            print(f"✅ Model loaded from {model_path}")
            
            if 'final_loss' in checkpoint:
                print(f"📊 Final training loss: {checkpoint['final_loss']:.4f}")
        else:
            print(f"⚠️  Model file not found: {model_path}")
            print("   Please run cpu_train_amharic.py first to train the model")
            model_loaded = False
            
    except Exception as e:
        print(f"❌ Error loading model: {e}")
        model_loaded = False

def generate_text(input_text, max_length=32, temperature=0.8):
    """Generate text using the model"""
    global model, model_loaded
    
    if not model_loaded or model is None:
        return {
            'generated_text': f"[Model not loaded] Input: {input_text}",
            'compression_ratio': 1.0,
            'error': 'Model not loaded. Please train the model first.'
        }
    
    try:
        # Convert input text to bytes
        input_bytes = [b for b in input_text.encode('utf-8')]
        
        # Pad or truncate to 32 bytes
        if len(input_bytes) > 32:
            input_bytes = input_bytes[:32]
        else:
            input_bytes.extend([0] * (32 - len(input_bytes)))
        
        input_tensor = torch.tensor([input_bytes], dtype=torch.long)
        
        with torch.no_grad():
            # Forward pass for compression info
            outputs = model(input_tensor)
            compression_ratio = outputs.get('compression_ratio', 1.0)
            
            # Generate text
            generated = model.generate(input_tensor, max_length=max_length, temperature=temperature)
            
            # Decode generated bytes
            gen_bytes = generated[0].tolist()
            
            # Filter out padding and invalid bytes
            real_bytes = []
            for b in gen_bytes:
                if b == 0:  # Stop at padding
                    break
                if 0 < b < 256:
                    real_bytes.append(b)
            
            try:
                decoded = bytes(real_bytes).decode('utf-8', errors='ignore')
                # Clean up the output
                decoded = decoded.strip()
                if not decoded:
                    decoded = f"[Generated {len(real_bytes)} bytes - decoding unclear]"
            except:
                decoded = f"[Generated {len(real_bytes)} bytes - decoding failed]"
            
            return {
                'generated_text': decoded,
                'compression_ratio': float(compression_ratio),
                'input_bytes': len(input_text.encode('utf-8')),
                'output_bytes': len(real_bytes)
            }
            
    except Exception as e:
        return {
            'generated_text': f"[Error during generation: {str(e)}]",
            'compression_ratio': 1.0,
            'error': str(e)
        }

@app.route('/')
def home():
    return '''
    <!DOCTYPE html>
    <html>
    <head>
        <title>Amharic H-Net Demo</title>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <style>
            body { 
                font-family: 'Segoe UI', Arial, sans-serif; 
                margin: 0;
                padding: 20px;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                min-height: 100vh;
            }
            .container { 
                max-width: 900px; 
                margin: 0 auto;
                background: white;
                border-radius: 15px;
                padding: 30px;
                box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            }
            .header {
                text-align: center;
                margin-bottom: 30px;
                border-bottom: 2px solid #f0f0f0;
                padding-bottom: 20px;
            }
            .header h1 {
                color: #333;
                margin: 0;
                font-size: 2.5em;
            }
            .header p {
                color: #666;
                margin: 10px 0;
                font-size: 1.1em;
            }
            .demo-section {
                margin: 30px 0;
                padding: 25px;
                border: 2px solid #f0f0f0;
                border-radius: 10px;
                background: #fafafa;
            }
            .demo-section h3 {
                margin-top: 0;
                color: #333;
                border-bottom: 1px solid #ddd;
                padding-bottom: 10px;
            }
            textarea { 
                width: 100%; 
                height: 100px; 
                margin: 10px 0;
                padding: 15px;
                border: 2px solid #ddd;
                border-radius: 8px;
                font-size: 16px;
                font-family: 'Arial Unicode MS', Arial;
                resize: vertical;
                box-sizing: border-box;
            }
            textarea:focus {
                border-color: #007cba;
                outline: none;
            }
            button { 
                padding: 12px 24px; 
                background: #007cba; 
                color: white; 
                border: none; 
                border-radius: 6px;
                font-size: 16px;
                cursor: pointer;
                margin: 10px 5px 10px 0;
                transition: background 0.3s;
            }
            button:hover {
                background: #005a87;
            }
            button:disabled {
                background: #ccc;
                cursor: not-allowed;
            }
            .result { 
                background: #f8f9fa; 
                padding: 20px; 
                margin: 20px 0; 
                border-radius: 8px;
                border-left: 4px solid #007cba;
            }
            .metric {
                display: inline-block;
                margin: 5px 10px 5px 0;
                padding: 5px 12px;
                background: #e3f2fd;
                border-radius: 20px;
                font-size: 14px;
                color: #1976d2;
            }
            .error {
                background: #ffebee;
                border-left-color: #f44336;
                color: #c62828;
            }
            .loading {
                opacity: 0.6;
            }
            .status {
                padding: 15px;
                margin: 20px 0;
                border-radius: 8px;
                text-align: center;
            }
            .status.success {
                background: #e8f5e8;
                color: #2e7d32;
                border: 1px solid #4caf50;
            }
            .status.warning {
                background: #fff3e0;
                color: #ef6c00;
                border: 1px solid #ff9800;
            }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1>🇪🇹 Amharic H-Net Demo</h1>
                <p><strong>CPU-Only Local Training</strong> - No GPU or API keys needed!</p>
                <p>Hierarchical Neural Network for Amharic Language Processing</p>
            </div>
            
            <div id="modelStatus" class="status"></div>
            
            <div class="demo-section">
                <h3>🎯 Text Generation</h3>
                <p>Enter Amharic text and see how the H-Net model processes and generates text:</p>
                <textarea id="input" placeholder="Enter Amharic text (e.g., ሰላም, እንዴት ነህ, አዲስ አበባ)..."></textarea>
                <br>
                <button onclick="generate()" id="generateBtn">Generate Text</button>
                <button onclick="clearResults()">Clear Results</button>
                
                <div id="result" class="result" style="display:none;">
                    <h4>Model Output:</h4>
                    <p><strong>Generated Text:</strong> <span id="output"></span></p>
                    <div class="metrics">
                        <span class="metric">Compression: <span id="compression"></span></span>
                        <span class="metric">Input Bytes: <span id="inputBytes"></span></span>
                        <span class="metric">Output Bytes: <span id="outputBytes"></span></span>
                    </div>
                </div>
            </div>
            
            <div class="demo-section">
                <h3>🔬 How H-Net Works</h3>
                <p><strong>Dynamic Chunking:</strong> Instead of fixed tokenization, H-Net learns to group bytes based on content.</p>
                <p><strong>Hierarchical Processing:</strong> Encodes → Compresses → Processes → Decompresses → Decodes</p>
                <p><strong>Amharic Advantage:</strong> No spaces needed - learns morphological boundaries automatically!</p>
                
                <div class="metrics">
                    <span class="metric">Model Size: ~50K parameters</span>
                    <span class="metric">Training: CPU-only</span>
                    <span class="metric">Architecture: 1-stage H-Net</span>
                    <span class="metric">Vocabulary: 256 bytes</span>
                </div>
            </div>
            
            <div class="demo-section">
                <h3>📊 Quick Test Examples</h3>
                <p>Try these Amharic phrases:</p>
                <button onclick="testExample('ሰላም')">ሰላም (Hello)</button>
                <button onclick="testExample('እንዴት ነህ')">እንዴት ነህ (How are you)</button>
                <button onclick="testExample('አዲስ አበባ')">አዲስ አበባ (Addis Ababa)</button>
                <button onclick="testExample('ኢትዮጵያ')">ኢትዮጵያ (Ethiopia)</button>
            </div>
        </div>
        
        <script>
        // Check model status on page load
        window.onload = function() {
            checkModelStatus();
        };
        
        async function checkModelStatus() {
            try {
                const response = await fetch('/status');
                const status = await response.json();
                
                const statusDiv = document.getElementById('modelStatus');
                if (status.model_loaded) {
                    statusDiv.className = 'status success';
                    statusDiv.innerHTML = '✅ Model loaded and ready for generation!';
                } else {
                    statusDiv.className = 'status warning';
                    statusDiv.innerHTML = '⚠️ Model not loaded. Please run cpu_train_amharic.py first to train the model.';
                }
            } catch (error) {
                const statusDiv = document.getElementById('modelStatus');
                statusDiv.className = 'status warning';
                statusDiv.innerHTML = '⚠️ Could not check model status.';
            }
        }
        
        async function generate() {
            const input = document.getElementById('input').value;
            if (!input.trim()) {
                alert('Please enter some text first!');
                return;
            }
            
            const button = document.getElementById('generateBtn');
            const resultDiv = document.getElementById('result');
            
            // Show loading state
            button.disabled = true;
            button.textContent = 'Generating...';
            resultDiv.className = 'result loading';
            
            try {
                const response = await fetch('/generate', {
                    method: 'POST',
                    headers: {'Content-Type': 'application/json'},
                    body: JSON.stringify({text: input})
                });
                
                const result = await response.json();
                
                // Update UI
                document.getElementById('output').textContent = result.generated_text;
                document.getElementById('compression').textContent = result.compression_ratio.toFixed(1) + 'x';
                document.getElementById('inputBytes').textContent = result.input_bytes || 'N/A';
                document.getElementById('outputBytes').textContent = result.output_bytes || 'N/A';
                
                resultDiv.style.display = 'block';
                resultDiv.className = result.error ? 'result error' : 'result';
                
            } catch (error) {
                document.getElementById('output').textContent = 'Error: ' + error.message;
                document.getElementById('compression').textContent = 'N/A';
                resultDiv.style.display = 'block';
                resultDiv.className = 'result error';
            } finally {
                // Reset button
                button.disabled = false;
                button.textContent = 'Generate Text';
            }
        }
        
        function testExample(text) {
            document.getElementById('input').value = text;
            generate();
        }
        
        function clearResults() {
            document.getElementById('result').style.display = 'none';
            document.getElementById('input').value = '';
        }
        
        // Allow Enter key to generate
        document.getElementById('input').addEventListener('keypress', function(e) {
            if (e.key === 'Enter' && e.ctrlKey) {
                generate();
            }
        });
        </script>
    </body>
    </html>
    '''

@app.route('/generate', methods=['POST'])
def generate():
    """Generate text endpoint"""
    try:
        data = request.json
        input_text = data.get('text', '')
        
        if not input_text.strip():
            return jsonify({
                'generated_text': '[No input provided]',
                'compression_ratio': 1.0,
                'error': 'No input text provided'
            })
        
        result = generate_text(input_text)
        return jsonify(result)
        
    except Exception as e:
        return jsonify({
            'generated_text': f'[Server error: {str(e)}]',
            'compression_ratio': 1.0,
            'error': str(e)
        })

@app.route('/status')
def status():
    """Check model status"""
    global model_loaded
    return jsonify({
        'model_loaded': model_loaded,
        'model_path': 'tiny_amharic_hnet.pt',
        'model_exists': os.path.exists('tiny_amharic_hnet.pt')
    })

if __name__ == '__main__':
    print("🇪🇹 Amharic H-Net Local Demo Server")
    print("=" * 40)
    
    # Load model at startup
    load_model()
    
    print("🚀 Starting local demo server...")
    print("📱 Open: http://localhost:5000")
    print("💡 Tip: Train the model first with: python cpu_train_amharic.py")
    print("⏹️  Press Ctrl+C to stop the server")
    
    app.run(debug=True, port=5000, host='0.0.0.0')